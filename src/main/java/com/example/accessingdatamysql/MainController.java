package com.example.accessingdatamysql;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private GoodsRepository goodsRepository;

	@Autowired
	private Order2Repository order2Repository;

	@Autowired
	private Order1Repository order1Repository;

	@PostMapping(path="/users/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String address
			, @RequestParam String password
			, @RequestParam String mobilePhone
			, @RequestParam String sex
			) {

		User n = new User();
		n.setName(name);
		n.setAddress(address);
		n.setPassword(password);
		n.setMobilePhone(mobilePhone);
		n.setSex(sex);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/users")
	public @ResponseBody Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}

	@GetMapping("/findUser")
	public @ResponseBody User getUsersByName(@RequestParam String name) {
			return userRepository.findByName(name);
	}

	@PostMapping("/users/delete")
	public @ResponseBody String deleteUser(@RequestParam Integer id) {
			userRepository.deleteById(id);
			return "SUCCESS"; 
	}

	@PostMapping("/goods/delete")
	public @ResponseBody String deleteGood(@RequestParam Integer id) {
			goodsRepository.deleteById(id);
			return "SUCCESS"; 
	}

	@PostMapping("/users/edit")
	public @ResponseBody User editUser(
		@RequestParam String userName,
	  @RequestParam String name,
	  @RequestParam String mobilePhone,
	  @RequestParam String address,
	  @RequestParam String sex
		) {
				User user = userRepository.findByName(userName);
	if(user == null) {
		return null;
	}

        // 更新用户信息
        user.setName(name);
        user.setMobilePhone(mobilePhone);
        user.setAddress(address);
        user.setSex(sex);

        // 保存更改
        return userRepository.save(user);
	}

	@GetMapping(path="/goods")
	public @ResponseBody Iterable<Goods> getAllGoods() {
		return goodsRepository.findAll();
	}

	@GetMapping(path="/goods/byHot")
	public @ResponseBody List<Goods> getHotGoods() {
		return goodsRepository.findByOrderByHotDesc();
	}

	@PostMapping(path="/orders/add") // Map ONLY POST Requests
	public @ResponseBody String addNewOrder1 (@RequestParam String username
			, @RequestParam String goodName
			, @RequestParam String price) {

		Order1 n = new Order1();
		n.setGoodName(goodName);
		n.setUserName(username);
		n.setPrice(price);
		order1Repository.save(n);
		
		Goods good = goodsRepository.findByName(goodName);

		// if(good == null) {
		// 	return 'failed';
		// }

		good.addHot();
		goodsRepository.save(good);

		return "Saved";
	}

	@GetMapping(path="/temp-orders")
	public @ResponseBody Iterable<Order1> getAllOrder1() {
		return order1Repository.findAll();
	}

	@PostMapping(path="/orders/submit") // Map ONLY POST Requests
	public @ResponseBody String submitOrder (@RequestParam String userName
	  , @RequestParam String details
		, @RequestParam String price) {
		Order2 n = new Order2();
		n.setUserName(userName);
		n.setDetails(details);
		n.setPrice(price);
		order2Repository.save(n);
		order1Repository.deleteAll();
		return "Saved";
	}

	@GetMapping(path="/orders")
	public @ResponseBody Iterable<Order2> getAllOrders() {
		return order2Repository.findAll();
	}
}
